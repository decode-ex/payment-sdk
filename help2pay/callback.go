package help2pay

import (
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"strings"

	"github.com/shopspring/decimal"
)

var ErrInvalidSign = errors.New("invalid sign")

type StatusCode = string

const (
	// Deposit process is successful.
	StatusCodeSuccess StatusCode = "000"
	// Transfer process is incomplete.
	// Possible reasons: TheBank or the user terminates the process before it is completed.
	StatusCodeFailed StatusCode = "001"
	// The transfer approved by Gateway after verified that the transfer was completed.
	StatusCodeApproved StatusCode = "006"
	// The transfer reject by Gateway after verifying the transfer was not completed or failed.
	StatusCodeRejected StatusCode = "007"
	// The transfer has been canceled.
	StatusCodeCanceled StatusCode = "008"
	// The transfer still in pending status.
	StatusCodePending StatusCode = "009"
)

type ErrorCode = string

const (
	// User key in wrong account password
	ErrorCodeAccountPassword ErrorCode = "AccountPassword"
	// User’s bank account not able to login/bank account setup not complete
	ErrorCodeAccountSetting ErrorCode = "AccountSetting"
	// ATM approve is required
	ErrorCodeATMApproveRequired ErrorCode = "ATMApproveRequired"
	// User is blacklisted
	ErrorCodeBlacklisted ErrorCode = "Blacklisted"
	// User’s bank account is insufficient fund
	ErrorCodeInsufficientFund ErrorCode = "Insufficient Fund"
	// User key in invalid TAC in any transfer step
	ErrorCodeInvalidTAC ErrorCode = "InvalidTAC"
	// User’s bank is under maintenance
	ErrorCodeMaintenance ErrorCode = "Maintenance"
	// Session time out
	ErrorCodeSession ErrorCode = "Session"
	// TAC time out in any transfer step
	ErrorCodeTimeOutTAC ErrorCode = "TimeOutTAC"
	// User’s transaction is declined by bank
	ErrorCodeTransactionDeclined ErrorCode = "TransactionDeclined"
	// User’s bank account hit transaction limit per transaction/daily
	ErrorCodeTransactionLimit ErrorCode = "TransactionLimit"
)

type rawDepositCallbackPayload struct {
	// Merchant submitted during the transfer transaction.
	Merchant string `form:"Merchant"`
	// Reference submitted during the transfer transaction.
	Reference string `form:"Reference"`
	// Currency submitted during transfer transaction.
	Currency CurrencyCode `form:"Currency"`
	// Amount submitted during the transfer transaction.
	Amount string `form:"Amount"`
	// Language indicated upon submission
	Language string `form:"Language"`
	// Customer submitted during the transfer transaction
	Customer string `form:"Customer"`
	// Datetime submitted during the transfer transaction.
	Datetime string `form:"Datetime"`
	// Datetime for the transaction processed. In UTC time.
	StatementDate string `protobuf:"bytes,8,opt,name=StatementDate,proto3" json:"StatementDate,omitempty"`
	// Note submitted during the transfer transaction.
	Note string `form:"Note"`
	// EncrytedSign generated by Gateway for verification to prevent fraud.
	Key string `form:"Key"`
	// The latest status of the Payment Submission.
	Status StatusCode `form:"Status"`
	// Help2Pay Deposit ID
	ID string `form:"ID"`
	// Transaction Error Message
	ErrorCode ErrorCode `form:"ErrorCode"`
}

func (raw *rawDepositCallbackPayload) UnmarshalFromQuery(query string) error {
	value, err := url.ParseQuery(query)
	if err != nil {
		return err
	}
	return raw.UnmarshalForm(value)
}

func (raw *rawDepositCallbackPayload) UnmarshalForm(value url.Values) error {
	if value == nil {
		return errors.New("empty callback payload")
	}
	raw.Merchant = value.Get("Merchant")
	raw.Reference = value.Get("Reference")
	raw.Currency = CurrencyCode(value.Get("Currency"))
	raw.Amount = value.Get("Amount")
	raw.Language = value.Get("Language")
	raw.Customer = value.Get("Customer")
	raw.Datetime = value.Get("Datetime")
	raw.StatementDate = value.Get("StatementDate")
	raw.Note = value.Get("Note")
	raw.Key = value.Get("Key")
	raw.Status = StatusCode(value.Get("Status"))
	raw.ID = value.Get("ID")
	raw.ErrorCode = ErrorCode(value.Get("ErrorCode"))

	if raw.Merchant == "" || raw.Reference == "" || raw.Currency == "" || raw.Amount == "" ||
		raw.Status == "" || raw.ID == "" || raw.Key == "" {
		return errors.New("missing required fields in callback payload")
	}

	return nil
}

func (raw *rawDepositCallbackPayload) generateSign(securityCode string) string {
	return signer{}.SignCallback(raw, securityCode)
}

func (raw *rawDepositCallbackPayload) VerifySignature(securityCode string) error {
	expect := raw.generateSign(securityCode)
	if !strings.EqualFold(expect, raw.Key) {
		return fmt.Errorf("%w, expect %s, got %s", ErrInvalidSign, expect, raw.Key)
	}
	return nil
}

func (raw *rawDepositCallbackPayload) IsSuccess() bool {
	return raw.Status == StatusCodeSuccess
}

type DepositCallbackRequest struct {
	raw    *rawDepositCallbackPayload
	amount decimal.Decimal
}

func ParseDepositCallbackRequest(req *http.Request) (*DepositCallbackRequest, error) {
	if req == nil {
		return nil, errors.New("request is nil")
	}
	if err := req.ParseForm(); err != nil {
		return nil, err
	}

	raw := &rawDepositCallbackPayload{}
	if err := raw.UnmarshalForm(req.Form); err != nil {
		return nil, err
	}

	amount, err := decimal.NewFromString(raw.Amount)
	if err != nil {
		return nil, err
	}

	return &DepositCallbackRequest{
		raw:    raw,
		amount: amount,
	}, nil
}

func (req *DepositCallbackRequest) MerchantOrderID() string {
	return req.raw.Reference
}

func (req *DepositCallbackRequest) SupplierOrderCode() string {
	return req.raw.ID
}

func (req *DepositCallbackRequest) Amount() decimal.Decimal {
	return req.amount
}

func (req *DepositCallbackRequest) Currency() CurrencyCode {
	return req.raw.Currency
}

func (req *DepositCallbackRequest) Status() StatusCode {
	return req.raw.Status
}

func (req *DepositCallbackRequest) VerifySignature(conf *Config) error {
	if conf == nil {
		return fmt.Errorf("config is nil")
	}
	if req == nil || req.raw == nil {
		return fmt.Errorf("raw payload is nil")
	}
	if conf.MerchantCode != req.raw.Merchant {
		return fmt.Errorf("invalid merchant code: %s", req.raw.Merchant)
	}

	return req.raw.VerifySignature(conf.SecurityCode)
}

func (req *DepositCallbackRequest) IsSuccess() bool {
	return req.raw.IsSuccess()
}

type DepositCallbackReply struct{}

func (req *DepositCallbackRequest) Reply() *DepositCallbackReply {
	return &DepositCallbackReply{}
}

func (reply *DepositCallbackReply) WriteTo(w http.ResponseWriter) {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(http.StatusOK)
	w.Write([]byte("success"))
}
